---
- name: Deploy the SandstoneDashboard app
  hosts: all
  vars_files:
    - vars.yaml

  tasks:

    - name: Install python3-venv package
      ansible.builtin.apt:
        name: python3-venv
        state: present
        update_cache: true
      become: true
      tags:
        - pip

    - name: Create app directory
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      tags:
        - pip
        - dotenv
        - config_files
        - app_files

    - name: Create config directory
      ansible.builtin.file:
        path: "{{ config_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      tags:
        - config_files

    - name: Copy requirements files to the app dir
      ansible.builtin.copy:
        src: ../requirements.txt
        dest: "{{ requirements_file }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      tags: pip

    - name: Update pip, setuptools to latest in virtualenv
      ansible.builtin.pip:
        name: ['pip', 'setuptools']
        state: latest
        virtualenv: "{{ venv_path }}"
        virtualenv_command: "python3 -m venv"
      tags: pip

    - name: Install Python requirements in virtualenv
      ansible.builtin.pip:
        requirements: "{{ requirements_file }}"
        virtualenv: "{{ venv_path }}"
        virtualenv_command: "python3 -m venv"
      register: pip_requirements_result
      until: pip_requirements_result is succeeded
      retries: 3
      delay: 5
      tags: pip

    - name: Copy dotenv file to the app dir, make backup before
      ansible.builtin.copy:
        src: "../src/.env.{{ dotenv_host }}"
        dest: "{{ app_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        backup: true
      tags: dotenv

    # Leave this commented out unless the SMB share is unavailable
    # - name: Copy config files to the config dir
    #   ansible.builtin.copy:
    #     src: "../src/config/{{ item }}"
    #     dest: "{{ config_dir }}"
    #     owner: "{{ ansible_user }}"
    #     group: "{{ ansible_user }}"
    #     mode: '0600'
    #   loop: "{{ config_files }}"
    #   tags: config_files

    - name: Copy constants.py to the app dir
      ansible.builtin.copy:
        src: "../src/constants.py"
        dest: "{{ app_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      notify: Restart shared services
      tags: app_files

    - name: Copy common_functions.py to the app dir
      ansible.builtin.copy:
        src: "../src/common_functions.py"
        dest: "{{ app_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      notify: Restart shared services
      tags: app_files

    - name: Copy getPressures.py to the app dir
      ansible.builtin.copy:
        src: "../src/getPressures.py"
        dest: "{{ app_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      notify: Restart getPressures.service
      when: "'shed' in group_names"
      tags: app_files

    - name: Copy getSHT30.py to the app dir
      ansible.builtin.copy:
        src: "../src/getSHT30.py"
        dest: "{{ app_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      notify: Restart getSHT30.service
      when: "'shed' in group_names"
      tags: app_files

    - name: Copy getTemps.py to the app dir
      ansible.builtin.copy:
        src: "../src/getTemps.py"
        dest: "{{ app_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      notify: Restart getTemps.service
      tags: app_files

    - name: Copy getWeather.py to the app dir
      ansible.builtin.copy:
        src: "../src/getWeather.py"
        dest: "{{ app_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      notify: Restart getWeather.service
      when: "'shed' in group_names"
      tags: app_files

    - name: Deploy systemd getPressures.service
      ansible.builtin.copy:
        src: "systemd/getPressures.service"
        dest: "/etc/systemd/system/getPressures.service"
        owner: root
        group: root
        mode: '0644'
      notify:
        - Reload systemd daemon
        - Restart getPressures.service
      become: true
      when: "'shed' in group_names"
      tags: systemd

    - name: Deploy systemd getSHT30.service
      ansible.builtin.copy:
        src: "systemd/getSHT30.service"
        dest: "/etc/systemd/system/getSHT30.service"
        owner: root
        group: root
        mode: '0644'
      notify:
        - Reload systemd daemon
        - Restart getSHT30.service
      become: true
      when: "'shed' in group_names"
      tags: systemd

    - name: Deploy systemd getTemps.service
      ansible.builtin.copy:
        src: "systemd/getTemps.service"
        dest: "/etc/systemd/system/getTemps.service"
        owner: root
        group: root
        mode: '0644'
      notify:
        - Reload systemd daemon
        - Restart getTemps.service
      become: true
      tags: systemd

    - name: Deploy systemd getWeather.service
      ansible.builtin.copy:
        src: "systemd/getWeather.service"
        dest: "/etc/systemd/system/getWeather.service"
        owner: root
        group: root
        mode: '0644'
      notify:
        - Reload systemd daemon
        - Restart getWeather.service
      become: true
      when: "'shed' in group_names"
      tags: systemd

    - name: Create log directory
      ansible.builtin.file:
        path: "{{ log_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      become: true
      tags: logging

    - name: Deploy logrotate config files to shed
      ansible.builtin.copy:
        src: "logrotate/{{ item }}"
        dest: "/etc/logrotate.d"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ all_services }}"
      become: true
      when: "'shed' in group_names"
      tags: logging

    - name: Deploy logrotate config files to schoolroom
      ansible.builtin.copy:
        src: "logrotate/{{ item }}"
        dest: "/etc/logrotate.d"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ services_schoolroom }}"
      become: true
      when: "'schoolroom' in group_names"
      tags: logging

    - name: Deploy logrotate config files to stagewall
      ansible.builtin.copy:
        src: "logrotate/{{ item }}"
        dest: "/etc/logrotate.d"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ services_stagewall }}"
      become: true
      when: "'stagewall' in group_names"
      tags: logging

  handlers:

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: true
      become: true

    - name: Restart getPressures.service
      ansible.builtin.systemd:
        name: getPressures.service
        enabled: true
        state: restarted
      become: true
      when: "'shed' in group_names"
      listen: Restart shared services

    - name: Restart getSHT30.service
      ansible.builtin.systemd:
        name: getSHT30.service
        enabled: true
        state: restarted
      become: true
      when: "'shed' in group_names"
      listen: Restart shared services

    - name: Restart getTemps.service
      ansible.builtin.systemd:
        name: getTemps.service
        enabled: true
        state: restarted
      become: true
      listen: Restart shared services

    - name: Restart getWeather.service
      ansible.builtin.systemd:
        name: getWeather.service
        enabled: true
        state: restarted
      become: true
      listen: Restart shared services
      when: "'shed' in group_names"

- name: Ensure services are enabled and running
  hosts: all
  vars_files:
    - vars.yaml

  tasks:
    - name: Ensure services are running and enabled on the shed host
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop: "{{ all_services }}"
      become: true
      when: "'shed' in group_names"
      tags: verify_services

    - name: Ensure services are running and enabled on the schoolroom hosts
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop: "{{ services_schoolroom }}"
      become: true
      when: "'schoolroom' in group_names"
      tags: verify_services

    - name: Ensure services are running and enabled on the stagewall hosts
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop: "{{ services_stagewall }}"
      become: true
      when: "'stagewall' in group_names"
      tags: verify_services
